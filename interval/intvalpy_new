import numpy as np

infinity = float('inf')

def unique(a, decimals=12):
    """
        удаление дубликатов из массива a, при этом она округляет значения до заданного количества десятичных знаков
    """
    a = np.ascontiguousarray(a)
    a = np.around(a, decimals=int(decimals))
    _, index = np.unique(a.view([('', a.dtype)]*a.shape[1]), return_index=True)
    index = sorted(index)
    return a[index]

def clear_zero_rows(a, b, ndim=2):
    """
    Эта функция удаляет строки из массива a и соответствующие элементы из массива b,
    если все элементы строки в a близки к нулю (по сравнению с заданным порогом).
    """
    a, b = np.ascontiguousarray(a), np.ascontiguousarray(b)
    a, b = np.around(a, decimals=12), np.around(b, decimals=12)

    cnmty = True
    if np.sum((np.sum(abs(a) <= 1e-12, axis=1) == ndim) & (b > 0)) > 0:
        cnmty = False

    index = np.where(np.sum(abs(a) <= 1e-12, axis=1) != ndim)
    return a[index], b[index], cnmty


def get_boundary_intervals(A, b):
    """вычисляет границы интервалов для каждой строки матрицы A и вектора b"""
    m, n = A.shape
    S = []

    for i in range(m):
        q = [-infinity, infinity]
        si = True
        dotx = (A[i]*b[i])/np.dot(A[i], A[i])

        p = np.array([-A[i, 1], A[i, 0]])

        for k in range(m):
            if k == i:
                continue
            Akx = np.dot(A[k], dotx)
            c = np.dot(A[k], p)

            if np.sign(c) == -1:
                tmp = (b[k] - Akx) / c
                q[1] = q[1] if q[1] <= tmp else tmp
            elif np.sign(c) == 1:
                tmp = (b[k] - Akx) / c
                q[0] = q[0] if tmp < q[0] else tmp
            else:
                if Akx < b[k]:
                    if np.dot(A[k], A[i]) > 0:
                        si = False
                        break
                    else:
                        return []

        if q[0] > q[1]:
            si = False

        # избавление от неопределённости inf * 0
        p = p + 1e-301
        if si:
            S.append(list(dotx+p*q[0]) + list(dotx+p*q[1]) + [i])

    return np.array(S)


def get_particular_points(S, A, b):
    """находит особые точки на основе границ интервалов и
    возвращает результаты вместе с информацией о конечных значениях"""
    PP = []
    V = S[:, :2]

    binf = ~((abs(V[:, 0]) < float("inf")) & (abs(V[:, 1]) < float("inf")))

    if len(V[binf]) != 0:
        nV = 1
        for k in S[:, 4]:
            k = int(k)
            PP.append((A[k]*b[k])/np.dot(A[k], A[k]))
    else:
        nV = 0
        PP = V

    return np.array(PP), nV, binf


def get_intervals_path(S):
    """построение пути на основе входного массива интервалов S
    возвращает массив P, содержащий последовательность точек пути
    """
    bs, bp = S[0, :2], S[0, :2]
    P = [bp]

    while len(S) > 0:
        index = 0
        for k in range(len(S)):
            if np.max(np.abs(bs - S[k, :2])) < 1e-8:
                index = k
                break
        if index >= len(S):
            return np.array(P)
        es = S[index, 2:4]

        if np.max(np.abs(bs-es)) > 1e-8:
            P.append(es)

            if np.max(np.abs(bp-es)) < 1e-8:
                return np.array(P)
            bs = es
        S = np.delete(S, index, axis=0)
    return np.array(P)

__center_rm = []


def lineqs(A, b, show=True, title="Solution Set", color='gray',
        bounds=None, alpha=0.5, s=10, size=(15, 15), save=False):
    """
    Функция визуализирует множество решений системы линейных алгебраических
    неравенств A x >= b с двумя переменными методом граничных интервалов, а также выводит
    вершины множества решений.

    Если множество решений неограниченно, то алгоритм самостоятельно
    выбирает границы визуализации.

    Parameters:
            A: float, array_like
                Матрица системы линейных алгебраических неравенств
            b: float, array_like
                Вектор правой части системы линейных алгебраических неравенств.
            show: bool, optional
                Этот параметр отвечает за отображение набора решений.
                По умолчанию значение равно True, то есть график отображается.
            title: str, optional
                Легенда графика
            color: str, optional
                Цвет внутренней области решений
            bounds: array_like, optional
                Границы области рисования. Первый элемент массива отвечает за нижние грани
                на осях OX и OY, а второй — за верхние. Таким образом, чтобы OX
                находилась в пределах [-2, 2], а OY — в пределах [-3, 4], необходимо задать границы как [[-2, -3], [2, 4]].
            alpha: float, optional
                Прозрачность
            s: float, optional
                Размер точек вершин
            size: tuple, optional
                Размер окна рисования
            save: bool, optional
                Сохранять ли график

    Returns:
            out: list
            Возвращает список упорядоченных вершин.
            Если show = True, то график отображается.
    """

    A = np.asarray(A)
    b = np.asarray(b)

    n, m = A.shape
    assert m <= 2, "There should be two columns in matrix A."
    assert b.shape[0] == n, "The size of the matrix A must be consistent with the size of the vector of the right part of b."

    A, b, cnmty = clear_zero_rows(A, b)

    S = get_boundary_intervals(A, b)
    if len(S) == 0:
        return S

    PP, nV, binf = get_particular_points(S, A, b)

    if (np.asarray([binf]) == True):
        if bounds is None:
            PP = np.array(PP)
            PPmin, PPmax = np.min(PP, axis=0), np.max(PP, axis=0)
            center = (PPmin + PPmax)/2
            rm = max((PPmax - PPmin)/2)
            __center_rm.append([max(abs(center) + 5*rm)])
            A = np.append(np.append(A, np.eye(2)), -np.eye(2)).reshape((len(A)+4, 2))
            b = np.append(np.append(b, center-5*rm), -(center+5*rm))

        else:
            A = np.append(np.append(A, np.eye(2)), -np.eye(2)).reshape((len(A)+4, 2))
            b = np.append(np.append(b, [bounds[0][0], bounds[0][1]]),
                          [-bounds[1][0], -bounds[1][1]])

        S = get_boundary_intervals(A, b)

    vertices = get_intervals_path(S)

    return unique(vertices)

def IntLinIncR2(A, b, consistency='uni'):
    ortant = [(1, 1), (-1, 1), (-1, -1), (1, -1)] #координатные четверти
    vertices = [] # вершинки
    n, m = A.shape # размерность матрицы А

    assert m <= 2, "There should be two columns in matrix A."
    assert b.shape[0] == n, "The size of the matrix A must be consistent with the size of the vector of the right part of b."

    def algo(bounds):
        for ort in range(4):
            tmp = A.copy()
            # массивы для хранения коэффициентов и свободных членов системы уравнений
            WorkListA = np.zeros((2*n+m, m))
            WorkListb = np.zeros(2*n+m)

            for k in range(m):
                if ortant[ort][k] == -1: # если мы не в 1 четверти
                    tmp[:, k] = tmp[:, k].dual
                WorkListA[2*n+k, k] = -ortant[ort][k]

            if consistency == 'uni':
                WorkListA[:n], WorkListA[n:2*n] = tmp.a, -tmp.b
                WorkListb[:n], WorkListb[n:2*n] = b.b, -b.a
            elif consistency == 'tol':
                WorkListA[:n], WorkListA[n:2*n] = -tmp.a, tmp.b
                WorkListb[:n], WorkListb[n:2*n] = -b.a, b.b
            else:
                msg = "Неверно указан тип согласования системы! Используйте 'uni' или 'tol'."
                raise Exception(msg)

            vertices.append(lineqs(-WorkListA, -WorkListb, show=False, bounds=bounds))
    algo(None)

    # Если в каком-либо ортанте множество решений неограничено, то создаём
    # новое отрисовочное окно, чтобы срез решений был одинаковым.
    global __center_rm
    if len(__center_rm) > 0:
        vertices = []
        _max = max(np.array(__center_rm))
        bounds = np.array([[-_max, -_max], [_max, _max]])
        algo(bounds)
    __center_rm = []

    return vertices
